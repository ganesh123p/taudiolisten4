document.addEventListener('DOMContentLoaded', () => {
    const inputTextEl = document.getElementById('inputText');
    const displayTextEl = document.getElementById('displayText');
    const startButton = document.getElementById('startButton');
    const nextWordButton = document.getElementById('nextWordButton');
    const prevWordButton = document.getElementById('prevWordButton');
    const resetButton = document.getElementById('resetButton');
    const autoPlayButton = document.getElementById('autoPlayButton');
    const speedControl = document.getElementById('speedControl');

    let words = [];
    let currentWordIndex = -1;
    let autoPlayInterval = null;
    let isAutoPlaying = false;

    function prepareText() {
        const text = inputTextEl.value.trim();
        if (!text) {
            displayTextEl.innerHTML = "Please enter some text.";
            words = [];
            currentWordIndex = -1;
            disableNavigationButtons();
            return;
        }
        // Split by space, but also handle multiple spaces and newlines
        words = text.split(/\s+/).filter(word => word.length > 0);
        currentWordIndex = -1; // Start before the first word
        renderText();
        if (words.length > 0) {
            enableNavigationButtons();
            nextWordButton.disabled = false;
            prevWordButton.disabled = true; // Can't go previous from start
        } else {
            disableNavigationButtons();
        }
    }

    function renderText() {
        displayTextEl.innerHTML = ''; // Clear previous
        words.forEach((word, index) => {
            const span = document.createElement('span');
            span.textContent = word;
            span.id = `word-${index}`;
            if (index === currentWordIndex) {
                span.classList.add('highlight');
            }
            displayTextEl.appendChild(span);
            // Add a space after each word (except the last) for readability
            if (index < words.length - 1) {
                displayTextEl.appendChild(document.createTextNode(' '));
            }
        });
    }

    function highlightWord(index) {
        // Remove previous highlight
        const oldHighlighted = displayTextEl.querySelector('.highlight');
        if (oldHighlighted) {
            oldHighlighted.classList.remove('highlight');
        }

        // Add new highlight
        if (index >= 0 && index < words.length) {
            const newHighlighted = displayTextEl.querySelector(`#word-${index}`);
            if (newHighlighted) {
                newHighlighted.classList.add('highlight');
                // Scroll into view if needed
                newHighlighted.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });
            }
        }
    }

    function moveToNextWord() {
        if (currentWordIndex < words.length - 1) {
            currentWordIndex++;
            highlightWord(currentWordIndex);
            updateButtonStates();
        } else {
            if (isAutoPlaying) stopAutoPlay(); // Stop if at the end
            // Optionally, loop back: currentWordIndex = -1; moveToNextWord();
        }
    }

    function moveToPrevWord() {
        if (currentWordIndex > 0) {
            currentWordIndex--;
            highlightWord(currentWordIndex);
            updateButtonStates();
        }
    }

    function resetHighlight() {
        currentWordIndex = -1;
        const highlighted = displayTextEl.querySelector('.highlight');
        if (highlighted) {
            highlighted.classList.remove('highlight');
        }
        stopAutoPlay();
        updateButtonStates();
        if (words.length > 0) {
             nextWordButton.disabled = false;
             prevWordButton.disabled = true;
        }
    }

    function updateButtonStates() {
        nextWordButton.disabled = currentWordIndex >= words.length - 1 || isAutoPlaying;
        prevWordButton.disabled = currentWordIndex <= 0 || isAutoPlaying;
        resetButton.disabled = words.length === 0 || isAutoPlaying;
        autoPlayButton.disabled = words.length === 0;
    }

    function disableNavigationButtons() {
        nextWordButton.disabled = true;
        prevWordButton.disabled = true;
        resetButton.disabled = true;
        autoPlayButton.disabled = true;
    }
    function enableNavigationButtons() {
        resetButton.disabled = false;
        autoPlayButton.disabled = false;
        // Next/Prev will be handled by their specific logic
    }


    function startAutoPlay() {
        if (isAutoPlaying || words.length === 0) return;

        isAutoPlaying = true;
        autoPlayButton.textContent = "Stop Auto Play";
        disableNavigationButtonsForAutoPlay();

        // If at the end, reset to start for autoplay
        if (currentWordIndex >= words.length - 1) {
            currentWordIndex = -1;
        }

        const speed = parseInt(speedControl.value, 10) || 500;
        autoPlayInterval = setInterval(() => {
            if (currentWordIndex < words.length - 1) {
                moveToNextWord();
            } else {
                stopAutoPlay(); // Reached the end
            }
        }, speed);
        moveToNextWord(); // Move to the first word immediately if starting from -1
    }

    function stopAutoPlay() {
        if (!isAutoPlaying) return;

        clearInterval(autoPlayInterval);
        isAutoPlaying = false;
        autoPlayButton.textContent = "Auto Play";
        autoPlayInterval = null;
        enableNavigationButtonsAfterAutoPlay();
    }

    function disableNavigationButtonsForAutoPlay() {
        nextWordButton.disabled = true;
        prevWordButton.disabled = true;
        resetButton.disabled = true;
        startButton.disabled = true; // Don't reload text during autoplay
    }

    function enableNavigationButtonsAfterAutoPlay() {
        updateButtonStates(); // This will set next/prev based on currentWordIndex
        resetButton.disabled = words.length === 0;
        startButton.disabled = false;
    }


    startButton.addEventListener('click', () => {
        stopAutoPlay(); // Stop autoplay if it's running
        prepareText();
        if (words.length > 0){
            updateButtonStates(); // Update based on newly loaded text
            nextWordButton.disabled = false;
            prevWordButton.disabled = true;
        }
    });

    nextWordButton.addEventListener('click', moveToNextWord);
    prevWordButton.addEventListener('click', moveToPrevWord);
    resetButton.addEventListener('click', () => {
        stopAutoPlay();
        resetHighlight();
    });

    autoPlayButton.addEventListener('click', () => {
        if (isAutoPlaying) {
            stopAutoPlay();
        } else {
            startAutoPlay();
        }
    });

    // Initial setup
    disableNavigationButtons();
});
